✅ 目的
約2ヶ月で習得可能な技術を用いて

ロックマン風のレーンシューティング対戦ゲームを開発

クライアントエンジニアとしてのスキルアップも狙う

✅ 習得技術（2ヶ月で習得可能）
以下の3つを並行して学びつつ、実践に落とし込む：

Unityのアニメーション制御（Animator, BlendTree, トランジション）

UniTask（非同期処理の簡潔な記述）

UnityでのGit管理（GitHub連携）

これらは「実践しながら習得可能」で、開発にも直結。

✅ ゲーム概要
ジャンル：2D レーンシューティング対戦アクション

プレイ感：ロックマンのような横スクロールベース

レーンを上下に移動しながら弾を撃ち合う

オンライン対戦 or CPU戦が可能な形式

✅ 開発計画（ステップ別）
全体を7ステップで整理しました（現在はステップ1完了中）。

1. プロジェクト準備 ✅
Unityプロジェクト作成（Unity 2022.3.34f1）

GitHub連携（.gitignore含む）

Git Flow導入（main / develop / feature/〜）

GitHub Actions による自動ビルド設定（WebGLターゲット）

2. プレイヤー操作（レーン移動、攻撃、アニメーション）
3. 弾の発射と当たり判定（弾生成、移動、ヒット処理）
4. 対戦ロジック（HP、勝敗判定、スコア管理）
5. UI実装（HPゲージ、レーン表示、スタート画面）
6. 対戦相手（AI or ネットワーク対戦）
7. ビルド＆公開（WebGL, Windows）
✅ 並行学習できること
学ぶ技術	プロジェクト内の活用タイミング
Unityアニメーション	プレイヤーや敵の動き（待機/移動/攻撃）
UniTask	入力制御、攻撃クールタイム、非同期演出
Git + GitHub	チーム管理、ブランチ管理、自動ビルド

✅ 次に進むステップ
2. プレイヤー操作の実装

キャラクターのプレハブ作成

キー入力で上下レーン移動（例：W/Sキー）

アニメーション制御（待機 ⇄ 移動）

必要であれば、ステップ2の具体的なコード例から始められます。
「プレイヤーのレーン移動」から進めましょうか？

--------------------------------------------------------------------------------------------------------------------------------------------
✅ 開発進捗まとめ（ロックマン風レーンシューティング対戦ゲーム）
🎯 目的と技術習得
内容	詳細
🎮 目的	約2ヶ月でゲームを開発しながら、Unity技術・Git・非同期処理（UniTask）の実践習得
💡 習得技術	Animator（アニメーション制御）、UniTask（非同期）、Git + GitHub連携（チーム開発）

🧭 ステップ進捗
✅ ステップ1：プロジェクト準備
Unity 2022.3.34f1 プロジェクト作成

.gitignore 設定済み

GitHub連携 & Git Flow（main / develop / feature/～）構成

GitHub Actions で WebGL 自動ビルド設定済み

✅ ステップ2：プレイヤー操作（移動・アニメーション）
プレハブ作成済み

W/Sキー でレーン上下移動を実装（1マスずつ）

Animator Controller 設定（Idle, Move ステート切替）

Trigger パラメータによるアニメーション遷移確認済み

✅ ステップ3：弾の発射と当たり判定
弾（Bullet）のスクリプト作成

SetDirection(Vector2) で方向指定

Update()で移動、lifetime による自動破棄

当たり判定（OnTriggerEnter2D）により IDamageable にダメージ送信

プレイヤーと敵の両者から弾を発射可能

弾のスプライト反転により向き調整 (flipX)

Bullet bulletScript = bullet.GetComponent<Bullet>() による正しい取得を実装

✅ ステップ4：対戦ロジック（HP / 勝敗判定）
共通インターフェース IDamageable を作成

csharp
コピーする
編集する
public interface IDamageable
{
    void TakeDamage(int amount);
}
プレイヤー・敵にHP処理を実装（maxHP, currentHP, Die()）

GameManager で勝利／敗北処理を共通管理

🔄 次のステップ
▶ ステップ5：UIの実装
HPゲージ

勝敗の結果表示（"勝利", "敗北"）

スタート画面・再戦ボタンの設置

🔧 技術連携（プロジェクト内での活用）
技術	活用場所
Animator	プレイヤー＆敵の状態変化（待機⇔移動⇔攻撃など）
UniTask	攻撃クールタイム、アニメーション完了待ちなど
Git + GitHub	ブランチ運用、CIによる自動ビルド、進捗管理